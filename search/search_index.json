{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to my project For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout Import datasets data1 <- read.csv(\"pml-training.csv\", stringsAsFactors = FALSE, na.strings = c(\"\", \"NA\")) data2 <- read.csv(\"pml-testing.csv\", stringsAsFactors = FALSE, na.strings = c(\"\", \"NA\")) Ensure 'classe' columns exist in data1 if (!\"classe\" %in% colnames(data1)) Drop unnecessary columns c(\"user_name\", \"raw_timestamp_part_1\", \"raw_timestamp_part_2\", \"cvtd_timestamp\", \"new_window\") data1 <- data1[, !(colnames(data1) %in% drop_cols)] data2 <- data2[, !(colnames(data2) %in% drop_cols)] Remove columns with too many missing values (except classe) classe_column <- data1$classe # Preserve classe data1 <- data1[, colSums(is.na(data1)) == 0] data1$classe <- classe_column # Restore classe data2 <- data2[, colSums(is.na(data2)) == 0] Ensure consistency: Keep only common columns + classe in data1 common_cols <- intersect(colnames(data1), colnames(data2)) data1 <- data1[, c(common_cols, \"classe\")] data2 <- data2[, common_cols] # data2 doesn't have classe Convert classe to factor data1$classe <- as.factor(data1$classe) Split into training and testing sets set.seed(123) index1 <- sample(1:nrow(data1), size = 0.7 * nrow(data1)) train_data <- data1[index1, ] test_data <- data1[-index1, ] Train Random Forest model rf_model <- randomForest(classe ~ ., data = train_data, ntree = 500, mtry = 5) Print model summery print(rf_model) Predict on test set test_predictions <- predict(rf_model, newdata = test_data) Evaluate accuracy accuracy <- mean(test_predictions == test_data$classe) print(paste(\"Model Accuracy on Test Data:\", round(accuracy * 100, 2), \"%\")) Ensure test data matches training data structure (excluding classe) data2 <- data2[, colnames(train_data)[colnames(train_data) != \"classe\"]] Handle missing values in data2 by replacing them with column medians for (col in names(data2)) {data2[[col]][is.na(data2[[col]])] <- median(data2[[col]], na.rm = TRUE)} Make final predictions on data2 final_predictions <- predict(rf_model, newdata = data2) Print predictions print(final_predictions) Final predictions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 A A A A A A A A A A A A B A A A A B A B Levels: A B C D E \"Model Accuracy on Test Data: 99.97 %\"","title":"Welcome to my project"},{"location":"#welcome-to-my-project","text":"For full documentation visit mkdocs.org .","title":"Welcome to my project"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout","title":"Commands"},{"location":"#import-datasets","text":"data1 <- read.csv(\"pml-training.csv\", stringsAsFactors = FALSE, na.strings = c(\"\", \"NA\")) data2 <- read.csv(\"pml-testing.csv\", stringsAsFactors = FALSE, na.strings = c(\"\", \"NA\"))","title":"Import datasets"},{"location":"#ensure-classe-columns-exist-in-data1","text":"if (!\"classe\" %in% colnames(data1))","title":"Ensure 'classe' columns exist in data1"},{"location":"#drop-unnecessary-columns","text":"c(\"user_name\", \"raw_timestamp_part_1\", \"raw_timestamp_part_2\", \"cvtd_timestamp\", \"new_window\") data1 <- data1[, !(colnames(data1) %in% drop_cols)] data2 <- data2[, !(colnames(data2) %in% drop_cols)]","title":"Drop unnecessary columns"},{"location":"#remove-columns-with-too-many-missing-values-except-classe","text":"classe_column <- data1$classe # Preserve classe data1 <- data1[, colSums(is.na(data1)) == 0] data1$classe <- classe_column # Restore classe data2 <- data2[, colSums(is.na(data2)) == 0]","title":"Remove columns with too many missing values (except classe)"},{"location":"#ensure-consistency-keep-only-common-columns-classe-in-data1","text":"common_cols <- intersect(colnames(data1), colnames(data2)) data1 <- data1[, c(common_cols, \"classe\")] data2 <- data2[, common_cols] # data2 doesn't have classe","title":"Ensure consistency: Keep only common columns + classe in data1"},{"location":"#convert-classe-to-factor","text":"data1$classe <- as.factor(data1$classe)","title":"Convert classe to factor"},{"location":"#split-into-training-and-testing-sets","text":"set.seed(123) index1 <- sample(1:nrow(data1), size = 0.7 * nrow(data1)) train_data <- data1[index1, ] test_data <- data1[-index1, ]","title":"Split into training and testing sets"},{"location":"#train-random-forest-model","text":"rf_model <- randomForest(classe ~ ., data = train_data, ntree = 500, mtry = 5)","title":"Train Random Forest model"},{"location":"#print-model-summery","text":"print(rf_model)","title":"Print model summery"},{"location":"#predict-on-test-set","text":"test_predictions <- predict(rf_model, newdata = test_data)","title":"Predict on test set"},{"location":"#evaluate-accuracy","text":"accuracy <- mean(test_predictions == test_data$classe) print(paste(\"Model Accuracy on Test Data:\", round(accuracy * 100, 2), \"%\"))","title":"Evaluate accuracy"},{"location":"#ensure-test-data-matches-training-data-structure-excluding-classe","text":"data2 <- data2[, colnames(train_data)[colnames(train_data) != \"classe\"]]","title":"Ensure test data matches training data structure (excluding classe)"},{"location":"#handle-missing-values-in-data2-by-replacing-them-with-column-medians","text":"for (col in names(data2)) {data2[[col]][is.na(data2[[col]])] <- median(data2[[col]], na.rm = TRUE)}","title":"Handle missing values in data2 by replacing them with column medians"},{"location":"#make-final-predictions-on-data2","text":"final_predictions <- predict(rf_model, newdata = data2)","title":"Make final predictions on data2"},{"location":"#print-predictions","text":"print(final_predictions)","title":"Print predictions"},{"location":"#final-predictions","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 A A A A A A A A A A A A B A A A A B A B Levels: A B C D E \"Model Accuracy on Test Data: 99.97 %\"","title":"Final predictions"}]}